/* tslint:disable */
/* eslint-disable */
/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.23.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import axiosWithOptionalFetch from "../axios-instance";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { FilterableMetadataInputValue } from "../models";
// @ts-ignore
import { FolderV2 } from "../models";
// @ts-ignore
import { SearchableStringInput } from "../models";
// @ts-ignore
import { SearchableUnixSecondsInput } from "../models";
// @ts-ignore
import { TestCaseV2 } from "../models";
// @ts-ignore
import { V2FoldersGet200Response } from "../models";
// @ts-ignore
import { V2PipelinesGet200Response } from "../models";
// @ts-ignore
import { V2PipelinesGet200Response1 } from "../models";
// @ts-ignore
import { V2TestCasesGet200Response } from "../models";
// @ts-ignore
import { V2TestResultsGet200Response } from "../models";
/**
 * V2Api - axios parameter creator
 * @export
 */
export const V2ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersGet: async (
      parentFolderId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/folders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (parentFolderId !== undefined) {
        localVarQueryParameter["parentFolderId"] = parentFolderId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersIdGet: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("v2FoldersIdGet", "id", id);
      const localVarPath = `/v2/folders/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2PipelinesGet: async (
      label?: string,
      slug?: SearchableStringInput,
      folderId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/pipelines`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (label !== undefined) {
        localVarQueryParameter["label"] = label;
      }

      if (slug !== undefined) {
        localVarQueryParameter["slug"] = slug;
      }

      if (folderId !== undefined) {
        localVarQueryParameter["folderId"] = folderId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get test cases
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesGet: async (
      pipelineId?: string,
      pipelineSlug?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/test-cases`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (pipelineId !== undefined) {
        localVarQueryParameter["pipelineId"] = pipelineId;
      }

      if (pipelineSlug !== undefined) {
        localVarQueryParameter["pipelineSlug"] = pipelineSlug;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdGet: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("v2TestCasesIdGet", "id", id);
      const localVarPath = `/v2/test-cases/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestResultsGet: async (
      pipelineId?: string,
      pipelineSlug?: string,
      createdAt?: SearchableUnixSecondsInput,
      metadata?: { [key: string]: FilterableMetadataInputValue },
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/test-results`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (pipelineId !== undefined) {
        localVarQueryParameter["pipelineId"] = pipelineId;
      }

      if (pipelineSlug !== undefined) {
        localVarQueryParameter["pipelineSlug"] = pipelineSlug;
      }

      if (createdAt !== undefined) {
        localVarQueryParameter["createdAt"] = createdAt;
      }

      if (metadata !== undefined) {
        localVarQueryParameter["metadata"] = metadata;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * V2Api - functional programming interface
 * @export
 */
export const V2ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = V2ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2FoldersGet(
      parentFolderId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<V2FoldersGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v2FoldersGet(
        parentFolderId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        axiosWithOptionalFetch,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2FoldersIdGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderV2>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v2FoldersIdGet(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        axiosWithOptionalFetch,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2PipelinesGet(
      label?: string,
      slug?: SearchableStringInput,
      folderId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<V2PipelinesGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v2PipelinesGet(
        label,
        slug,
        folderId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        axiosWithOptionalFetch,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get test cases
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2TestCasesGet(
      pipelineId?: string,
      pipelineSlug?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<V2TestCasesGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v2TestCasesGet(
        pipelineId,
        pipelineSlug,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        axiosWithOptionalFetch,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2TestCasesIdGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseV2>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v2TestCasesIdGet(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        axiosWithOptionalFetch,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2TestResultsGet(
      pipelineId?: string,
      pipelineSlug?: string,
      createdAt?: SearchableUnixSecondsInput,
      metadata?: { [key: string]: FilterableMetadataInputValue },
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<V2TestResultsGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v2TestResultsGet(
          pipelineId,
          pipelineSlug,
          createdAt,
          metadata,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        axiosWithOptionalFetch,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * V2Api - factory interface
 * @export
 */
export const V2ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = V2ApiFp(configuration);
  return {
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersGet(
      parentFolderId?: string,
      options?: any,
    ): AxiosPromise<V2FoldersGet200Response> {
      return localVarFp
        .v2FoldersGet(parentFolderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersIdGet(id: string, options?: any): AxiosPromise<FolderV2> {
      return localVarFp
        .v2FoldersIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2PipelinesGet(
      label?: string,
      slug?: SearchableStringInput,
      folderId?: string,
      options?: any,
    ): AxiosPromise<V2PipelinesGet200Response> {
      return localVarFp
        .v2PipelinesGet(label, slug, folderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get test cases
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesGet(
      pipelineId?: string,
      pipelineSlug?: string,
      options?: any,
    ): AxiosPromise<V2TestCasesGet200Response> {
      return localVarFp
        .v2TestCasesGet(pipelineId, pipelineSlug, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdGet(id: string, options?: any): AxiosPromise<TestCaseV2> {
      return localVarFp
        .v2TestCasesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestResultsGet(
      pipelineId?: string,
      pipelineSlug?: string,
      createdAt?: SearchableUnixSecondsInput,
      metadata?: { [key: string]: FilterableMetadataInputValue },
      options?: any,
    ): AxiosPromise<V2TestResultsGet200Response> {
      return localVarFp
        .v2TestResultsGet(
          pipelineId,
          pipelineSlug,
          createdAt,
          metadata,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * V2Api - object-oriented interface
 * @export
 * @class V2Api
 * @extends {BaseAPI}
 */
export class V2Api extends BaseAPI {
  /**
   *
   * @summary Get folders
   * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V2Api
   */
  public v2FoldersGet(parentFolderId?: string, options?: AxiosRequestConfig) {
    return V2ApiFp(this.configuration)
      .v2FoldersGet(parentFolderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a folder
   * @param {string} id The ID of the folder to retrieve
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V2Api
   */
  public v2FoldersIdGet(id: string, options?: AxiosRequestConfig) {
    return V2ApiFp(this.configuration)
      .v2FoldersIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get pipelines
   * @param {string} [label] The label to filter pipelines by
   * @param {SearchableStringInput} [slug] The slug to filter pipelines by
   * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V2Api
   */
  public v2PipelinesGet(
    label?: string,
    slug?: SearchableStringInput,
    folderId?: string,
    options?: AxiosRequestConfig,
  ) {
    return V2ApiFp(this.configuration)
      .v2PipelinesGet(label, slug, folderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get test cases
   * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
   * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V2Api
   */
  public v2TestCasesGet(
    pipelineId?: string,
    pipelineSlug?: string,
    options?: AxiosRequestConfig,
  ) {
    return V2ApiFp(this.configuration)
      .v2TestCasesGet(pipelineId, pipelineSlug, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a test case
   * @param {string} id The ID of the test case to retrieve
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V2Api
   */
  public v2TestCasesIdGet(id: string, options?: AxiosRequestConfig) {
    return V2ApiFp(this.configuration)
      .v2TestCasesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get test results
   * @param {string} [pipelineId] The ID of the pipeline
   * @param {string} [pipelineSlug] The slug of the pipeline
   * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
   * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V2Api
   */
  public v2TestResultsGet(
    pipelineId?: string,
    pipelineSlug?: string,
    createdAt?: SearchableUnixSecondsInput,
    metadata?: { [key: string]: FilterableMetadataInputValue },
    options?: AxiosRequestConfig,
  ) {
    return V2ApiFp(this.configuration)
      .v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { PipelinesGet200Response } from "../models";
// @ts-ignore
import { RunRequest } from "../models";
// @ts-ignore
import { RunResponse } from "../models";
// @ts-ignore
import { TestCaseGet200Response } from "../models";
// @ts-ignore
import { TestResultGet200Response } from "../models";
// @ts-ignore
import { TestResultGet200Response1 } from "../models";
// @ts-ignore
import { TestResultPost200Response } from "../models";
// @ts-ignore
import { TestResultPostRequest } from "../models";
/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pipelinesGet: async (
      label?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/pipelines`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (label !== undefined) {
        localVarQueryParameter["label"] = label;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runPost: async (
      runRequest: RunRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'runRequest' is not null or undefined
      assertParamExists("runPost", "runRequest", runRequest);
      const localVarPath = `/run`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        runRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} pipelineId The ID of the test case set to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testCaseGet: async (
      pipelineId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pipelineId' is not null or undefined
      assertParamExists("testCaseGet", "pipelineId", pipelineId);
      const localVarPath = `/test-case`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (pipelineId !== undefined) {
        localVarQueryParameter["pipelineId"] = pipelineId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get test result by ID
     * @param {string} resultId The ID of the test result to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testResultGet: async (
      resultId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resultId' is not null or undefined
      assertParamExists("testResultGet", "resultId", resultId);
      const localVarPath = `/test-result`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (resultId !== undefined) {
        localVarQueryParameter["resultId"] = resultId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new test result from runs
     * @param {TestResultPostRequest} testResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testResultPost: async (
      testResultPostRequest: TestResultPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'testResultPostRequest' is not null or undefined
      assertParamExists(
        "testResultPost",
        "testResultPostRequest",
        testResultPostRequest
      );
      const localVarPath = `/test-result`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        testResultPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pipelinesGet(
      label?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PipelinesGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pipelinesGet(
        label,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async runPost(
      runRequest: RunRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.runPost(
        runRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} pipelineId The ID of the test case set to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async testCaseGet(
      pipelineId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<TestCaseGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.testCaseGet(
        pipelineId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get test result by ID
     * @param {string} resultId The ID of the test result to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async testResultGet(
      resultId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<TestResultGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.testResultGet(
        resultId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new test result from runs
     * @param {TestResultPostRequest} testResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async testResultPost(
      testResultPostRequest: TestResultPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<TestResultPost200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.testResultPost(
        testResultPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoreApiFp(configuration);
  return {
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pipelinesGet(
      label?: string,
      options?: any
    ): AxiosPromise<PipelinesGet200Response> {
      return localVarFp
        .pipelinesGet(label, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runPost(runRequest: RunRequest, options?: any): AxiosPromise<RunResponse> {
      return localVarFp
        .runPost(runRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} pipelineId The ID of the test case set to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testCaseGet(
      pipelineId: string,
      options?: any
    ): AxiosPromise<TestCaseGet200Response> {
      return localVarFp
        .testCaseGet(pipelineId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get test result by ID
     * @param {string} resultId The ID of the test result to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testResultGet(
      resultId: string,
      options?: any
    ): AxiosPromise<TestResultGet200Response> {
      return localVarFp
        .testResultGet(resultId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new test result from runs
     * @param {TestResultPostRequest} testResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testResultPost(
      testResultPostRequest: TestResultPostRequest,
      options?: any
    ): AxiosPromise<TestResultPost200Response> {
      return localVarFp
        .testResultPost(testResultPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
  /**
   *
   * @summary Get pipelines, optionally filtered by label
   * @param {string} [label] The label to filter pipelines by
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public pipelinesGet(label?: string, options?: AxiosRequestConfig) {
    return CoreApiFp(this.configuration)
      .pipelinesGet(label, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a run
   * @param {RunRequest} runRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public runPost(runRequest: RunRequest, options?: AxiosRequestConfig) {
    return CoreApiFp(this.configuration)
      .runPost(runRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get test cases for a pipeline
   * @param {string} pipelineId The ID of the test case set to retrieve
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public testCaseGet(pipelineId: string, options?: AxiosRequestConfig) {
    return CoreApiFp(this.configuration)
      .testCaseGet(pipelineId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get test result by ID
   * @param {string} resultId The ID of the test result to retrieve
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public testResultGet(resultId: string, options?: AxiosRequestConfig) {
    return CoreApiFp(this.configuration)
      .testResultGet(resultId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new test result from runs
   * @param {TestResultPostRequest} testResultPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public testResultPost(
    testResultPostRequest: TestResultPostRequest,
    options?: AxiosRequestConfig
  ) {
    return CoreApiFp(this.configuration)
      .testResultPost(testResultPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
